// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cheatsheets.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCheatsheet = `-- name: CreateCheatsheet :exec
INSERT INTO cheatsheets (slug, title, category, subcategory, image_url)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCheatsheetParams struct {
	Slug        string      `json:"slug"`
	Title       string      `json:"title"`
	Category    Category    `json:"category"`
	Subcategory Subcategory `json:"subcategory"`
	ImageUrl    pgtype.Text `json:"image_url"`
}

func (q *Queries) CreateCheatsheet(ctx context.Context, arg CreateCheatsheetParams) error {
	_, err := q.db.Exec(ctx, createCheatsheet,
		arg.Slug,
		arg.Title,
		arg.Category,
		arg.Subcategory,
		arg.ImageUrl,
	)
	return err
}

const getCheatsheetByID = `-- name: GetCheatsheetByID :one
SELECT id, slug, title, category, subcategory, image_url, created_at, updated_at
FROM cheatsheets
WHERE id = $1
`

func (q *Queries) GetCheatsheetByID(ctx context.Context, id pgtype.UUID) (Cheatsheet, error) {
	row := q.db.QueryRow(ctx, getCheatsheetByID, id)
	var i Cheatsheet
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Category,
		&i.Subcategory,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCheatsheetBySlug = `-- name: GetCheatsheetBySlug :one
SELECT id, slug, title, category, subcategory, image_url, created_at, updated_at
FROM cheatsheets
WHERE slug = $1
`

func (q *Queries) GetCheatsheetBySlug(ctx context.Context, slug string) (Cheatsheet, error) {
	row := q.db.QueryRow(ctx, getCheatsheetBySlug, slug)
	var i Cheatsheet
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Category,
		&i.Subcategory,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCheatsheets = `-- name: ListCheatsheets :many
SELECT id, slug, title, category, subcategory, image_url, created_at, updated_at
FROM cheatsheets
WHERE ($3::category IS NULL OR category = $3)
  AND ($4::subcategory IS NULL OR subcategory = $4)
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCheatsheetsParams struct {
	Limit       int32           `json:"limit"`
	Offset      int32           `json:"offset"`
	Category    NullCategory    `json:"category"`
	Subcategory NullSubcategory `json:"subcategory"`
}

func (q *Queries) ListCheatsheets(ctx context.Context, arg ListCheatsheetsParams) ([]Cheatsheet, error) {
	rows, err := q.db.Query(ctx, listCheatsheets,
		arg.Limit,
		arg.Offset,
		arg.Category,
		arg.Subcategory,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cheatsheet{}
	for rows.Next() {
		var i Cheatsheet
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Category,
			&i.Subcategory,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCheatsheet = `-- name: UpdateCheatsheet :exec
UPDATE cheatsheets
SET slug = COALESCE(NULLIF($1::varchar, ''), slug),
    title = COALESCE(NULLIF($2::text, ''), title),
    category = COALESCE(NULLIF($3, '')::category, category),
    subcategory = COALESCE(NULLIF($4, '')::subcategory, subcategory),
    image_url = COALESCE(NULLIF($5::text, ''), image_url),
    updated_at = NOW()
WHERE id = $6
`

type UpdateCheatsheetParams struct {
	Slug        string      `json:"slug"`
	Title       string      `json:"title"`
	Category    interface{} `json:"category"`
	Subcategory interface{} `json:"subcategory"`
	ImageUrl    string      `json:"image_url"`
	ID          pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateCheatsheet(ctx context.Context, arg UpdateCheatsheetParams) error {
	_, err := q.db.Exec(ctx, updateCheatsheet,
		arg.Slug,
		arg.Title,
		arg.Category,
		arg.Subcategory,
		arg.ImageUrl,
		arg.ID,
	)
	return err
}

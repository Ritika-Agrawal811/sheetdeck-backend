// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Category string

const (
	CategoryHtml       Category = "html"
	CategoryCss        Category = "css"
	CategoryJavascript Category = "javascript"
	CategoryReact      Category = "react"
)

func (e *Category) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Category(s)
	case string:
		*e = Category(s)
	default:
		return fmt.Errorf("unsupported scan type for Category: %T", src)
	}
	return nil
}

type NullCategory struct {
	Category Category `json:"category"`
	Valid    bool     `json:"valid"` // Valid is true if Category is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategory) Scan(value interface{}) error {
	if value == nil {
		ns.Category, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Category.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Category), nil
}

type Subcategory string

const (
	SubcategoryConcepts        Subcategory = "concepts"
	SubcategoryAttributes      Subcategory = "attributes"
	SubcategoryElements        Subcategory = "elements"
	SubcategoryProperties      Subcategory = "properties"
	SubcategoryPseudoClasses   Subcategory = "pseudo_classes"
	SubcategoryMethods         Subcategory = "methods"
	SubcategorySelectors       Subcategory = "selectors"
	SubcategoryAdvancedSyntax  Subcategory = "advanced_syntax"
	SubcategoryDomManipulation Subcategory = "dom_manipulation"
	SubcategoryOperators       Subcategory = "operators"
)

func (e *Subcategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Subcategory(s)
	case string:
		*e = Subcategory(s)
	default:
		return fmt.Errorf("unsupported scan type for Subcategory: %T", src)
	}
	return nil
}

type NullSubcategory struct {
	Subcategory Subcategory `json:"subcategory"`
	Valid       bool        `json:"valid"` // Valid is true if Subcategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubcategory) Scan(value interface{}) error {
	if value == nil {
		ns.Subcategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Subcategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubcategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Subcategory), nil
}

type Cheatsheet struct {
	ID          pgtype.UUID        `json:"id"`
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Category    Category           `json:"category"`
	Subcategory Subcategory        `json:"subcategory"`
	ImageUrl    pgtype.Text        `json:"image_url"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Pageview struct {
	ID        pgtype.UUID      `json:"id"`
	Pathname  string           `json:"pathname"`
	HashedIp  string           `json:"hashed_ip"`
	Country   pgtype.Text      `json:"country"`
	Browser   pgtype.Text      `json:"browser"`
	Os        pgtype.Text      `json:"os"`
	Device    pgtype.Text      `json:"device"`
	UserAgent string           `json:"user_agent"`
	Referrer  pgtype.Text      `json:"referrer"`
	ViewedAt  pgtype.Timestamp `json:"viewed_at"`
}

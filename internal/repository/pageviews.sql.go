// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pageviews.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTotalViewsAndVisitors = `-- name: GetTotalViewsAndVisitors :one
SELECT COUNT(id) as total_views, COUNT(DISTINCT hashed_ip) as total_visitors
FROM pageviews
`

type GetTotalViewsAndVisitorsRow struct {
	TotalViews    int64 `json:"total_views"`
	TotalVisitors int64 `json:"total_visitors"`
}

func (q *Queries) GetTotalViewsAndVisitors(ctx context.Context) (GetTotalViewsAndVisitorsRow, error) {
	row := q.db.QueryRow(ctx, getTotalViewsAndVisitors)
	var i GetTotalViewsAndVisitorsRow
	err := row.Scan(&i.TotalViews, &i.TotalVisitors)
	return i, err
}

const storePageview = `-- name: StorePageview :exec
INSERT INTO pageviews (pathname, hashed_ip, country, browser, os, device, user_agent, referrer)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type StorePageviewParams struct {
	Pathname  string      `json:"pathname"`
	HashedIp  string      `json:"hashed_ip"`
	Country   pgtype.Text `json:"country"`
	Browser   pgtype.Text `json:"browser"`
	Os        pgtype.Text `json:"os"`
	Device    pgtype.Text `json:"device"`
	UserAgent string      `json:"user_agent"`
	Referrer  pgtype.Text `json:"referrer"`
}

func (q *Queries) StorePageview(ctx context.Context, arg StorePageviewParams) error {
	_, err := q.db.Exec(ctx, storePageview,
		arg.Pathname,
		arg.HashedIp,
		arg.Country,
		arg.Browser,
		arg.Os,
		arg.Device,
		arg.UserAgent,
		arg.Referrer,
	)
	return err
}
